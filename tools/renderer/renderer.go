package renderer

import (
	"bytes"
	"fmt"
	"html/template"
	"log"
	"strings"
)

// CommonErrorMessage Little Trick: if user gives a message without any emoji ‚Äî something wrong with renderer in common
const CommonErrorMessage = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º, –º–æ–∂–µ—Ç –ø–æ–∑–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è?"

type Renderer struct {
	TemplatePath      string
	ElementsToEmojis  map[string]string
	GemsToEmojis      map[string]string
	PreviousPageEmoji string
	NextPageEmoji     string
}

func NewRenderer(templatePath string) *Renderer {
	return &Renderer{
		TemplatePath: templatePath,
		ElementsToEmojis: map[string]string{
			"–ö—Ä–∏–æ":    "‚ùÑ",
			"–ü–∏—Ä–æ":    "üî•",
			"–ê–Ω–µ–º–æ":   "üçÉ",
			"–≠–ª–µ–∫—Ç—Ä–æ": "‚ö°",
			"–ì–µ–æ":     "üî∂",
			"–ì–∏–¥—Ä–æ":   "üíß",
			"–î–µ–Ω–¥—Ä–æ":  "üå±",
		},
		GemsToEmojis: map[string]string{
			"–ê–≥–∞—Ç –ê–≥–Ω–∏–¥—É—Å":     "üî¥",
			"–õ–∞–∑—É—Ä–∏—Ç –í–∞—Ä—É–Ω–∞–¥–∞": "üîµ",
			"–ê–º–µ—Ç–∏—Å—Ç –í–∞–¥–∂—Ä–∞–¥–∞": "\U0001F7E3",
			"–ë–∏—Ä—é–∑–∞ –í–∞–π—é–¥–∞":    "\U0001F7E2",
			"–ù–µ—Ñ—Ä–∏—Ç –®–∏–≤–∞–¥–∞":    "üíé",
			"–¢–æ–ø–∞–∑ –ü—Ä–∏—Ç—Ö–∏–≤–∞":   "\U0001F7E1",
			"–ò–∑—É–º—Ä—É–¥ –ù–∞–≥–∞–¥—É—Å":  "\U0001F7E2",
		},
		PreviousPageEmoji: "‚¨Ö",
		NextPageEmoji:     "‚û°",
	}
}

func (r *Renderer) AddEmojiToElement(el string) string {
	emoji, ok := r.ElementsToEmojis[el]
	if !ok {
		return el
	}

	return fmt.Sprintf("%s %s", emoji, el)
}

func (r *Renderer) GetEmojiToElement(el string) string {
	emoji, ok := r.ElementsToEmojis[el]
	if !ok {
		return el
	}

	return emoji
}

func (r *Renderer) AddEmojiToGem(gem string) string {
	emoji, ok := r.GemsToEmojis[gem]
	if !ok {
		return gem
	}

	return fmt.Sprintf("%s %s", emoji, gem)
}

func (r *Renderer) Render(name string, params interface{}) (string, error) {
	funcMap := template.FuncMap{"join": strings.Join}
	t := template.New(name).Funcs(funcMap)
	t, err := t.ParseFiles(r.TemplatePath + name)
	if err != nil {
		log.Printf("Error ocurred while parsing template file: %s\n", err.Error())

		return "", err
	}

	return r.renderToString(t, params), err
}

// RenderError Returns error message from template with emoji
func (r *Renderer) RenderError(errorCase string) string {
	params := struct {
		ErrorCase string
	}{
		ErrorCase: errorCase,
	}

	t := template.New("error.tpl")
	t, err := t.ParseFiles(r.TemplatePath + "error.tpl")
	if err != nil {
		return CommonErrorMessage
	}

	return r.renderToString(t, params)
}

func (r *Renderer) renderToString(t *template.Template, params interface{}) string {
	var tpl bytes.Buffer
	if err := t.Execute(&tpl, params); err != nil {
		log.Printf("Error ocurred while rendering: %s (params: %v)\n", err.Error(), params)
		return CommonErrorMessage
	}

	return tpl.String()
}
