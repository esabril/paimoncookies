package renderer

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestRenderer_RenderSuccessful(t *testing.T) {
	params := struct {
		Username string
	}{
		Username: "Angel",
	}

	r := NewRenderer("../../test/_templates/")
	expected := `Hello, Angel

Nice to see you! Your test is green now! ‚úÖ
Have a good day. üíú`

	result, err := r.Render("simple_template.tpl", params)

	assert.NoError(t, err)
	assert.Equal(t, expected, result)
}

func TestRenderer_RenderFail(t *testing.T) {
	params := struct {
		Username string
	}{
		Username: "Angel",
	}

	r := NewRenderer("wrong")
	result, err := r.Render("simple_template.tpl", params)

	assert.Error(t, err)
	assert.Equal(t, "", result)
}

func TestRenderer_RenderErrorSuccess(t *testing.T) {
	r := NewRenderer("../../test/_templates/")
	result := r.RenderError("Test Case")

	assert.Equal(t, "‚ùå I cannot show you what you want, only error in Test Case", result)
}

func TestRenderer_RenderErrorFail(t *testing.T) {
	r := NewRenderer("wrong")
	result := r.RenderError("Test Case")

	assert.Equal(t, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º, –º–æ–∂–µ—Ç –ø–æ–∑–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è?", result)
}

func TestRenderer_RenderErrorWrongRenderParams(t *testing.T) {
	r := NewRenderer("../../test/_templates/")
	params := struct {
		Animal string
	}{
		"Cat",
	}
	result, err := r.Render("wrong_template.tpl", params)

	assert.NoError(t, err)
	assert.Equal(t, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º, –º–æ–∂–µ—Ç –ø–æ–∑–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è?", result)
}

func TestRenderer_AddEmojiToElement(t *testing.T) {
	t.Parallel()

	r := NewRenderer("path")

	testCases := []struct {
		Element  string
		Expected string
	}{
		{"–ì–µ–æ", "üî∂ –ì–µ–æ"},
		{"–ì–∏–¥—Ä–æ", "üíß –ì–∏–¥—Ä–æ"},
		{"–ü–∏—Ä–æ", "üî• –ü–∏—Ä–æ"},
		{"–ê–Ω–µ–º–æ", "üçÉ –ê–Ω–µ–º–æ"},
		{"–ö—Ä–∏–æ", "‚ùÑ –ö—Ä–∏–æ"},
		{"–≠–ª–µ–∫—Ç—Ä–æ", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ"},
		{"–î–µ–Ω–¥—Ä–æ", "üå± –î–µ–Ω–¥—Ä–æ"},
		{"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"},
	}

	for _, tt := range testCases {
		t.Run(tt.Element, func(t *testing.T) {
			assert.Equal(t, tt.Expected, r.AddEmojiToElement(tt.Element))
		})
	}
}

func TestRenderer_GetEmojiToElement(t *testing.T) {
	t.Parallel()

	r := NewRenderer("path")

	testCases := []struct {
		Element  string
		Expected string
	}{
		{"–ì–µ–æ", "üî∂"},
		{"–ì–∏–¥—Ä–æ", "üíß"},
		{"–ü–∏—Ä–æ", "üî•"},
		{"–ê–Ω–µ–º–æ", "üçÉ"},
		{"–ö—Ä–∏–æ", "‚ùÑ"},
		{"–≠–ª–µ–∫—Ç—Ä–æ", "‚ö°"},
		{"–î–µ–Ω–¥—Ä–æ", "üå±"},
		{"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"},
	}

	for _, tt := range testCases {
		t.Run(tt.Element, func(t *testing.T) {
			assert.Equal(t, tt.Expected, r.GetEmojiToElement(tt.Element))
		})
	}
}

func TestRenderer_AddEmojiToGem(t *testing.T) {
	t.Parallel()

	r := NewRenderer("path")

	testCases := []struct {
		Gem      string
		Expected string
	}{
		{"–ê–≥–∞—Ç –ê–≥–Ω–∏–¥—É—Å", "üî¥ –ê–≥–∞—Ç –ê–≥–Ω–∏–¥—É—Å"},
		{"–õ–∞–∑—É—Ä–∏—Ç –í–∞—Ä—É–Ω–∞–¥–∞", "üîµ –õ–∞–∑—É—Ä–∏—Ç –í–∞—Ä—É–Ω–∞–¥–∞"},
		{"–ê–º–µ—Ç–∏—Å—Ç –í–∞–¥–∂—Ä–∞–¥–∞", "\U0001F7E3 –ê–º–µ—Ç–∏—Å—Ç –í–∞–¥–∂—Ä–∞–¥–∞"},
		{"–ë–∏—Ä—é–∑–∞ –í–∞–π—é–¥–∞", "\U0001F7E2 –ë–∏—Ä—é–∑–∞ –í–∞–π—é–¥–∞"},
		{"–ù–µ—Ñ—Ä–∏—Ç –®–∏–≤–∞–¥–∞", "üíé –ù–µ—Ñ—Ä–∏—Ç –®–∏–≤–∞–¥–∞"},
		{"–¢–æ–ø–∞–∑ –ü—Ä–∏—Ç—Ö–∏–≤–∞", "\U0001F7E1 –¢–æ–ø–∞–∑ –ü—Ä–∏—Ç—Ö–∏–≤–∞"},
	}

	for _, tt := range testCases {
		t.Run(tt.Gem, func(t *testing.T) {
			assert.Equal(t, tt.Expected, r.AddEmojiToGem(tt.Gem))
		})
	}
}
