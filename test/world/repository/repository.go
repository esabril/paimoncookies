// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/world/repository/repository.go

// Package world_repo is a generated GoMock package.
package world_repo

import (
	reflect "reflect"

	model "github.com/esabril/paimoncookies/internal/service/world/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIWorldRepo is a mock of IWorldRepo interface.
type MockIWorldRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIWorldRepoMockRecorder
}

// MockIWorldRepoMockRecorder is the mock recorder for MockIWorldRepo.
type MockIWorldRepoMockRecorder struct {
	mock *MockIWorldRepo
}

// NewMockIWorldRepo creates a new mock instance.
func NewMockIWorldRepo(ctrl *gomock.Controller) *MockIWorldRepo {
	mock := &MockIWorldRepo{ctrl: ctrl}
	mock.recorder = &MockIWorldRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorldRepo) EXPECT() *MockIWorldRepoMockRecorder {
	return m.recorder
}

// FindGemByTitle mocks base method.
func (m *MockIWorldRepo) FindGemByTitle(title string) (model.Gem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGemByTitle", title)
	ret0, _ := ret[0].(model.Gem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGemByTitle indicates an expected call of FindGemByTitle.
func (mr *MockIWorldRepoMockRecorder) FindGemByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGemByTitle", reflect.TypeOf((*MockIWorldRepo)(nil).FindGemByTitle), title)
}

// GetAscensionMaterialsByNames mocks base method.
func (m *MockIWorldRepo) GetAscensionMaterialsByNames(names []string) ([]model.AscensionMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAscensionMaterialsByNames", names)
	ret0, _ := ret[0].([]model.AscensionMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAscensionMaterialsByNames indicates an expected call of GetAscensionMaterialsByNames.
func (mr *MockIWorldRepoMockRecorder) GetAscensionMaterialsByNames(names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAscensionMaterialsByNames", reflect.TypeOf((*MockIWorldRepo)(nil).GetAscensionMaterialsByNames), names)
}

// GetGemByName mocks base method.
func (m *MockIWorldRepo) GetGemByName(name string) (model.Gem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGemByName", name)
	ret0, _ := ret[0].(model.Gem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGemByName indicates an expected call of GetGemByName.
func (mr *MockIWorldRepoMockRecorder) GetGemByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGemByName", reflect.TypeOf((*MockIWorldRepo)(nil).GetGemByName), name)
}

// GetGemDropInfoByName mocks base method.
func (m *MockIWorldRepo) GetGemDropInfoByName(name string) ([]model.BossDrop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGemDropInfoByName", name)
	ret0, _ := ret[0].([]model.BossDrop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGemDropInfoByName indicates an expected call of GetGemDropInfoByName.
func (mr *MockIWorldRepoMockRecorder) GetGemDropInfoByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGemDropInfoByName", reflect.TypeOf((*MockIWorldRepo)(nil).GetGemDropInfoByName), name)
}

// GetRegions mocks base method.
func (m *MockIWorldRepo) GetRegions() ([]model.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions")
	ret0, _ := ret[0].([]model.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockIWorldRepoMockRecorder) GetRegions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockIWorldRepo)(nil).GetRegions))
}

// GetTalentBookByType mocks base method.
func (m *MockIWorldRepo) GetTalentBookByType(bookType string) (model.TalentBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTalentBookByType", bookType)
	ret0, _ := ret[0].(model.TalentBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTalentBookByType indicates an expected call of GetTalentBookByType.
func (mr *MockIWorldRepoMockRecorder) GetTalentBookByType(bookType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTalentBookByType", reflect.TypeOf((*MockIWorldRepo)(nil).GetTalentBookByType), bookType)
}

// GetTalentBookWeekdays mocks base method.
func (m *MockIWorldRepo) GetTalentBookWeekdays(bookType string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTalentBookWeekdays", bookType)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTalentBookWeekdays indicates an expected call of GetTalentBookWeekdays.
func (mr *MockIWorldRepoMockRecorder) GetTalentBookWeekdays(bookType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTalentBookWeekdays", reflect.TypeOf((*MockIWorldRepo)(nil).GetTalentBookWeekdays), bookType)
}

// GetWeekdayTalentBooksWithLocation mocks base method.
func (m *MockIWorldRepo) GetWeekdayTalentBooksWithLocation(weekday string) ([]model.TalentBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekdayTalentBooksWithLocation", weekday)
	ret0, _ := ret[0].([]model.TalentBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekdayTalentBooksWithLocation indicates an expected call of GetWeekdayTalentBooksWithLocation.
func (mr *MockIWorldRepoMockRecorder) GetWeekdayTalentBooksWithLocation(weekday interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekdayTalentBooksWithLocation", reflect.TypeOf((*MockIWorldRepo)(nil).GetWeekdayTalentBooksWithLocation), weekday)
}

// GetWeekdayWeaponMaterialsWithLocation mocks base method.
func (m *MockIWorldRepo) GetWeekdayWeaponMaterialsWithLocation(weekday string) ([]model.WeaponMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekdayWeaponMaterialsWithLocation", weekday)
	ret0, _ := ret[0].([]model.WeaponMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekdayWeaponMaterialsWithLocation indicates an expected call of GetWeekdayWeaponMaterialsWithLocation.
func (mr *MockIWorldRepoMockRecorder) GetWeekdayWeaponMaterialsWithLocation(weekday interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekdayWeaponMaterialsWithLocation", reflect.TypeOf((*MockIWorldRepo)(nil).GetWeekdayWeaponMaterialsWithLocation), weekday)
}

// GetWeeklyBossDropByName mocks base method.
func (m *MockIWorldRepo) GetWeeklyBossDropByName(name string) (model.BossDrop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeeklyBossDropByName", name)
	ret0, _ := ret[0].(model.BossDrop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyBossDropByName indicates an expected call of GetWeeklyBossDropByName.
func (mr *MockIWorldRepoMockRecorder) GetWeeklyBossDropByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyBossDropByName", reflect.TypeOf((*MockIWorldRepo)(nil).GetWeeklyBossDropByName), name)
}

// GetWorldBossDropByName mocks base method.
func (m *MockIWorldRepo) GetWorldBossDropByName(name string) (model.BossDrop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldBossDropByName", name)
	ret0, _ := ret[0].(model.BossDrop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldBossDropByName indicates an expected call of GetWorldBossDropByName.
func (mr *MockIWorldRepoMockRecorder) GetWorldBossDropByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldBossDropByName", reflect.TypeOf((*MockIWorldRepo)(nil).GetWorldBossDropByName), name)
}
