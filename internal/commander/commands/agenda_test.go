package commands

import (
	"errors"
	"github.com/esabril/paimoncookies/internal/service"
	"github.com/esabril/paimoncookies/internal/service/world"
	"github.com/esabril/paimoncookies/internal/service/world/model"
	repo "github.com/esabril/paimoncookies/test/world/repository"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"testing"
)

var templatePath = "../template/"

// TestCommander_GetAgendaSixDaysSuccessful Getting Agenda for all weekdays except Sunday
func TestCommander_GetAgendaSixDaysSuccessful(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	m := repo.NewMockIWorldRepo(ctrl)
	configureWorldMockRepo(m)

	s := service.Service{
		TodayWeekday: "monday",
		World:        world.NewMock(m),
	}
	c := NewCommander(
		&s,
		templatePath,
		nil,
	)

	expected := `üîî –ß—Ç–æ, –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º?
–°–µ–≥–æ–¥–Ω—è üóì *–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫* –∏ —Å–µ–≥–æ–¥–Ω—è –≤ –¢–µ–π–≤–∞—Ç–µ —Ç–µ–±—è –∂–¥—É—Ç:

üìö *–ö–Ω–∏–≥–∏ –Ω–∞ —Ç–∞–ª–∞–Ω—Ç—ã*:
–ú–æ–Ω–¥—à—Ç–∞–¥—Ç: ¬´–û –°–≤–æ–±–æ–¥–µ¬ª
–õ–∏ –Æ—ç: ¬´–û –ü—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏–∏¬ª

üó° *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ä—É–∂–∏—è:*
–ú–æ–Ω–¥—à—Ç–∞–¥—Ç: ¬´–ü–ª–∏—Ç–∫–∏ –î–µ–∫–∞—Ä–∞–±–∏–∞–Ω–∞¬ª (–ø–ª–∏—Ç–æ—á–∫–∏)
–õ–∏ –Æ—ç: ¬´–°—Ç–æ–ª–±—ã –ì—É—é–Ω—å¬ª

–ó–∞–ø–∞—Å–∏—Å—å —Å–º–æ–ª–æ–π –∏ –≤–ø–µ—Ä–µ–¥! –ê –ü–∞–π–º–æ–Ω –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π! üí´`

	assert.Equal(t, expected, c.GetAgenda())
}

// TestCommander_GetAgendaSundaySuccessful Getting Agenda for Sunday
func TestCommander_GetAgendaSundaySuccessful(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	m := repo.NewMockIWorldRepo(ctrl)
	configureWorldMockRepo(m)

	s := service.Service{
		TodayWeekday: "sunday",
		World:        world.NewMock(m),
	}
	c := NewCommander(
		&s,
		templatePath,
		nil,
	)

	expected := `üîî –ß—Ç–æ, –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º?
–°–µ–≥–æ–¥–Ω—è üóì *–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ* –∏ —Å–µ–≥–æ–¥–Ω—è –≤ –¢–µ–π–≤–∞—Ç–µ —Ç–µ–±—è –∂–¥—É—Ç:

üìö *–ö–Ω–∏–≥–∏ –Ω–∞ —Ç–∞–ª–∞–Ω—Ç—ã*:
–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤–æ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–æ–±–æ–π –ü–æ–¥–∑–µ–º–µ–ª—å—è—Ö! –û—Ö –∏ —Å–ª–æ–∂–Ω—ã–π —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –≤—ã–±–æ—Ä! –ù–æ –ü–∞–π–º–æ–Ω –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!

üó° *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ä—É–∂–∏—è:*
–°–µ–≥–æ–¥–Ω—è –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã! –î–∞–≤–∞–π –≤—ã–±–∏—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ, –∫—É–¥–∞ –º—ã —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?

–ó–∞–ø–∞—Å–∏—Å—å —Å–º–æ–ª–æ–π –∏ –≤–ø–µ—Ä–µ–¥! –ê –ü–∞–π–º–æ–Ω –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π! üí´`

	assert.Equal(t, expected, c.GetAgenda())
}

func TestCommander_GetAgendaTemplateFail(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	m := repo.NewMockIWorldRepo(ctrl)
	configureWorldMockRepo(m)

	s := service.Service{
		TodayWeekday: "monday",
		World:        world.NewMock(m),
	}

	c := NewCommander(
		&s,
		"wrongTemplatePath/",
		nil,
	)

	assert.Equal(t, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º, –º–æ–∂–µ—Ç –ø–æ–∑–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è?", c.GetAgenda())
}

func TestCommander_GetAgendaDataFail(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	m := repo.NewMockIWorldRepo(ctrl)

	m.
		EXPECT().
		GetWeekdayTalentBooksWithLocation(gomock.Any()).
		DoAndReturn(func(w string) ([]model.TalentBook, error) {
			return nil, errors.New("something wrong with database")
		}).MaxTimes(1).MinTimes(1)

	s := service.Service{
		TodayWeekday: "monday",
		World:        world.NewMock(m),
	}
	c := NewCommander(
		&s,
		templatePath,
		nil,
	)

	expected := `ü§î –ß—Ç–æ? –¢—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª–∞ –ü–∞–π–º–æ–Ω –ø—Ä–æ ¬´—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è¬ª? –ö–∞–∂–µ—Ç—Å—è, –ü–∞–π–º–æ–Ω –Ω–µ—á–µ–≥–æ —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
–ü–æ–∑–≤–æ–ª—å –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å –∏ –º—ã —Å–Ω–æ–≤–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º. ü§ó`

	assert.Equal(t, expected, c.GetAgenda())
}

func configureWorldMockRepo(m *repo.MockIWorldRepo) {
	m.
		EXPECT().
		GetWeekdayTalentBooksWithLocation(gomock.Any()).
		DoAndReturn(func(w string) ([]model.TalentBook, error) {
			if w == "sunday" {
				return []model.TalentBook{}, nil
			}

			return []model.TalentBook{
				{
					Title:    "–û –°–≤–æ–±–æ–¥–µ",
					Location: "–ú–æ–Ω–¥—à—Ç–∞–¥—Ç",
				},
				{
					Title:    "–û –ü—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏–∏",
					Location: "–õ–∏ –Æ—ç",
				},
			}, nil
		}).MaxTimes(1).MinTimes(0)

	m.
		EXPECT().
		GetWeekdayWeaponMaterialsWithLocation(gomock.Any()).
		DoAndReturn(func(w string) ([]model.WeaponMaterial, error) {
			if w == "sunday" {
				return []model.WeaponMaterial{}, nil
			}

			return []model.WeaponMaterial{
				{
					Title:    "–ü–ª–∏—Ç–∫–∏ –î–µ–∫–∞—Ä–∞–±–∏–∞–Ω–∞",
					Location: "–ú–æ–Ω–¥—à—Ç–∞–¥—Ç",
					Alias:    "–ø–ª–∏—Ç–æ—á–∫–∏",
				},
				{
					Title:    "–°—Ç–æ–ª–±—ã –ì—É—é–Ω—å",
					Location: "–õ–∏ –Æ—ç",
				},
			}, nil
		}).MaxTimes(1).MinTimes(0)

	m.
		EXPECT().
		GetRegions().
		DoAndReturn(func() ([]model.Region, error) {
			return []model.Region{
				{
					Name:  "mondstadt",
					Title: "–ú–æ–Ω–¥—à—Ç–∞–¥—Ç",
				},
				{
					Name:  "liyue",
					Title: "–õ–∏ –Æ—ç",
				},
			}, nil
		}).MaxTimes(1).MinTimes(1)
}
