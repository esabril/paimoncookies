package commands

import (
	"github.com/esabril/paimoncookies/internal/service"
	"github.com/esabril/paimoncookies/internal/service/characters"
	"github.com/esabril/paimoncookies/tools/renderer"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestCommander_isCharacter(t *testing.T) {
	chs := map[string]bool{
		"–ö—ç–π—è":     true,
		"–≠–æ–ª–∞":     true,
		"–¶–∏—Ü–∏":     true,
		"–î–∏–ª—é–∫":    true,
		"–ô–æ–∏–º–∏—è":   true,
		"–¢–∞—Ä—Ç–∞–ª—å—è": true,
	}

	c := Commander{
		service: &service.Service{
			Characters: characters.NewMock(nil, chs),
		},
	}

	testCases := []struct {
		Reply    string
		Expected bool
	}{
		{"–°–∞—Ä–∞", false},
		{"–ö—ç–π—è", true},
		{"–ô–æ–∏–º–∏—è", true},
		{"–†—ç–π–∑–æ—Ä", false},
		{"–¢–∞—Ä—Ç–∞–ª—å—è", true},
		{"–ö—ç –¶–∏–Ω", false},
	}

	for _, tt := range testCases {
		t.Run(tt.Reply, func(t *testing.T) {
			assert.Equal(t, tt.Expected, c.isCharacter(tt.Reply))
		})
	}
}

func TestCommander_isElement(t *testing.T) {
	t.Parallel()

	elements := map[string][]string{
		"–ö—Ä–∏–æ":  {"–ö—ç–π—è", "–≠–æ–ª–∞", "–¶–∏—Ü–∏"},
		"–ü–∏—Ä–æ":  {"–î–∏–ª—é–∫", "–ô–æ–∏–º–∏—è"},
		"–ì–∏–¥—Ä–æ": {"–¢–∞—Ä—Ç–∞–ª—å—è"},
	}

	c := Commander{
		service: &service.Service{
			Characters: characters.NewMock(elements, nil),
		},
		renderer: renderer.NewRenderer("path"),
	}

	testCases := []struct {
		Reply    string
		Expected bool
	}{
		{"üî• –ü–∏—Ä–æ ‚û°", true},
		{"‚¨Ö üíß –ì–∏–¥—Ä–æ", true},
		{"‚ùÑ –ö—Ä–∏–æ", true},
		{"–ì–∏–¥—Ä–æ", true},
		{"üåè –ö —Å—Ç–∏—Ö–∏—è–º", false},
		{"–û—Ç–≤–µ—Ç –±–æ—Ç—É", false},
	}

	for _, tt := range testCases {
		t.Run(tt.Reply, func(t *testing.T) {
			assert.Equal(t, tt.Expected, c.isElement(tt.Reply))
		})
	}
}

func TestCommander_getElementFromReply(t *testing.T) {
	c := Commander{
		renderer: renderer.NewRenderer("path"),
	}

	testCases := []struct {
		Reply    string
		Expected string
	}{
		{"üî• –ü–∏—Ä–æ ‚û°", "–ü–∏—Ä–æ"},
		{"‚¨Ö üî• –ü–∏—Ä–æ", "–ü–∏—Ä–æ"},
		{"üî• –ü–∏—Ä–æ", "–ü–∏—Ä–æ"},
		{"–ü–∏—Ä–æ", "–ü–∏—Ä–æ"},
		{"–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏", "–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"},
	}

	for _, tt := range testCases {
		t.Run(tt.Reply, func(t *testing.T) {
			assert.Equal(t, tt.Expected, c.getElementFromReply(tt.Reply))
		})
	}
}
