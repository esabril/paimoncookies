package commands

import (
	"github.com/esabril/paimoncookies/internal/service"
	"github.com/esabril/paimoncookies/internal/service/archive"
	"github.com/esabril/paimoncookies/internal/service/characters"
	cModel "github.com/esabril/paimoncookies/internal/service/characters/model"
	wModel "github.com/esabril/paimoncookies/internal/service/world/model"
	characters_repo "github.com/esabril/paimoncookies/test/characters/repository"
	world_repo "github.com/esabril/paimoncookies/test/world/repository"
	"github.com/esabril/paimoncookies/tools/renderer"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestCommander_isCharacter(t *testing.T) {
	chs := map[string]bool{
		"–ö—ç–π—è":     true,
		"–≠–æ–ª–∞":     true,
		"–¶–∏—Ü–∏":     true,
		"–î–∏–ª—é–∫":    true,
		"–ô–æ–∏–º–∏—è":   true,
		"–¢–∞—Ä—Ç–∞–ª—å—è": true,
	}

	c := Commander{
		service: &service.Service{
			Characters: characters.NewMock(nil, nil, chs),
		},
	}

	testCases := []struct {
		Reply    string
		Expected bool
	}{
		{"–°–∞—Ä–∞", false},
		{"–ö—ç–π—è", true},
		{"–ô–æ–∏–º–∏—è", true},
		{"–†—ç–π–∑–æ—Ä", false},
		{"–¢–∞—Ä—Ç–∞–ª—å—è", true},
		{"–ö—ç –¶–∏–Ω", false},
	}

	for _, tt := range testCases {
		t.Run(tt.Reply, func(t *testing.T) {
			assert.Equal(t, tt.Expected, c.isCharacter(tt.Reply))
		})
	}
}

func TestCommander_isElement(t *testing.T) {
	t.Parallel()

	elements := map[string][]string{
		"–ö—Ä–∏–æ":  {"–ö—ç–π—è", "–≠–æ–ª–∞", "–¶–∏—Ü–∏"},
		"–ü–∏—Ä–æ":  {"–î–∏–ª—é–∫", "–ô–æ–∏–º–∏—è"},
		"–ì–∏–¥—Ä–æ": {"–¢–∞—Ä—Ç–∞–ª—å—è"},
	}

	c := Commander{
		service: &service.Service{
			Characters: characters.NewMock(nil, elements, nil),
		},
		renderer: renderer.NewRenderer("path"),
	}

	testCases := []struct {
		Reply    string
		Expected bool
	}{
		{"üî• –ü–∏—Ä–æ ‚û°", true},
		{"‚¨Ö üíß –ì–∏–¥—Ä–æ", true},
		{"‚ùÑ –ö—Ä–∏–æ", true},
		{"–ì–∏–¥—Ä–æ", true},
		{"üåè –ö —Å—Ç–∏—Ö–∏—è–º", false},
		{"–û—Ç–≤–µ—Ç –±–æ—Ç—É", false},
	}

	for _, tt := range testCases {
		t.Run(tt.Reply, func(t *testing.T) {
			assert.Equal(t, tt.Expected, c.isElement(tt.Reply))
		})
	}
}

func TestCommander_getElementFromReply(t *testing.T) {
	c := Commander{
		renderer: renderer.NewRenderer("path"),
	}

	testCases := []struct {
		Reply    string
		Expected string
	}{
		{"üî• –ü–∏—Ä–æ ‚û°", "–ü–∏—Ä–æ"},
		{"‚¨Ö üî• –ü–∏—Ä–æ", "–ü–∏—Ä–æ"},
		{"üî• –ü–∏—Ä–æ", "–ü–∏—Ä–æ"},
		{"–ü–∏—Ä–æ", "–ü–∏—Ä–æ"},
		{"–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏", "–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"},
	}

	for _, tt := range testCases {
		t.Run(tt.Reply, func(t *testing.T) {
			assert.Equal(t, tt.Expected, c.getElementFromReply(tt.Reply))
		})
	}
}

func TestCommander_GetCharacterMenuRulesSuccessful(t *testing.T) {
	t.Parallel()

	c := Commander{
		renderer: renderer.NewRenderer(DefaultTemplatePath),
	}

	testCases := []struct {
		Element  string
		Expected string
	}{
		{
			Element: "",
			Expected: `–¢—ã –º–æ–∂–µ—à—å –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –º–µ–Ω—é —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–∏–∑—É, –∞ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ *–≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç*, –≤ –ø–æ–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–∞–∂–µ –Ω–µ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ), –∏ —Ç–µ–±–µ —Ç—É—Ç –∂–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –£–¥–æ–±–Ω–æ, –¥–∞? üå∏

*–ü–∞—Ä–∞ –ø—Ä–∞–≤–∏–ª:*
- –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫–æ–µ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∏–≥—Ä–µ. –Ø –Ω–µ –∑–Ω–∞—é ¬´–ß–∏—á—É¬ª, –∞ –≤–æ—Ç –ø—Ä–æ –º–∏–ª–∞—à–∫—É –¶–∏ –¶–∏ —Ä–∞—Å—Å–∫–∞–∂—É —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º;
- –¥–ª—è –Ω–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –∏–∑ –ò–Ω–∞–¥–∑—É–º—ã —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –∏–º—è. –ê—Ä–∞—Ç–∞–∫–∏ –ò—Ç—Ç–æ, –¥—É–º–∞—é, –Ω–µ –æ–±–∏–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –º—ã –±—É–µ–º –∏—Å–∫–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ ¬´–ò—Ç—Ç–æ¬ª.

–ò—Ç–∞–∫, –æ –∫–æ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?`,
		},
		{
			Element: "–ì–∏–¥—Ä–æ",
			Expected: `–ü–∞–π–º–æ–Ω –º–æ–∂–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –≤–æ—Ç –æ–± —ç—Ç–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö —Å—Ç–∏—Ö–∏–∏ üíß –ì–∏–¥—Ä–æ

*–ü–∞—Ä–∞ –ø—Ä–∞–≤–∏–ª:*
- –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫–æ–µ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∏–≥—Ä–µ. –Ø –Ω–µ –∑–Ω–∞—é ¬´–ß–∏—á—É¬ª, –∞ –≤–æ—Ç –ø—Ä–æ –º–∏–ª–∞—à–∫—É –¶–∏ –¶–∏ —Ä–∞—Å—Å–∫–∞–∂—É —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º;
- –¥–ª—è –Ω–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –∏–∑ –ò–Ω–∞–¥–∑—É–º—ã —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –∏–º—è. –ê—Ä–∞—Ç–∞–∫–∏ –ò—Ç—Ç–æ, –¥—É–º–∞—é, –Ω–µ –æ–±–∏–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –º—ã –±—É–µ–º –∏—Å–∫–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ ¬´–ò—Ç—Ç–æ¬ª.

–ò—Ç–∞–∫, –æ –∫–æ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?`,
		},
	}

	for _, tt := range testCases {
		t.Run(tt.Element, func(t *testing.T) {
			assert.Equal(t, tt.Expected, c.GetCharacterMenuRules(tt.Element))
		})
	}
}

func TestCommander_GetCharacterMenuRulesFail(t *testing.T) {
	c := Commander{
		renderer: renderer.NewRenderer("path"),
	}

	assert.Equal(
		t,
		"–Ø –Ω–µ –º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π... –Ω–æ —Ç—ã –≤–µ–¥—å –∏ —Ç–∞–∫ –∏—Ö –ø–æ–º–Ω–∏—à—å, –ø—Ä–∞–≤–¥–∞?",
		c.GetCharacterMenuRules("–ü–∏—Ä–æ"),
	)
}

func TestCommander_GetCharacterInfo(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	w := world_repo.NewMockIWorldRepo(ctrl)
	c := characters_repo.NewMockICharactersRepo(ctrl)

	c.EXPECT().
		GetCharacterByName("–í–µ–Ω—Ç–∏").
		DoAndReturn(func(name string) (cModel.Character, error) {
			return cModel.Character{
				Title:                    "–í–µ–Ω—Ç–∏",
				Region:                   "–ú–æ–Ω–¥—à—Ç–∞–¥—Ç",
				Rarity:                   5,
				Element:                  "–ê–Ω–µ–º–æ",
				TalentBookType:           "ballad",
				TalentBossDrop:           "tail_of_boreas",
				AscensionBossDrop:        "hurricane_seed",
				AscensionGem:             "vayuda_turquoise",
				AscensionLocalSpeciality: "cecilia",
				CommonAscensionMaterial:  "slime",
			}, nil
		}).MaxTimes(1).MaxTimes(1)

	w.EXPECT().
		GetTalentBookByType("ballad").
		DoAndReturn(func(bookType string) (wModel.TalentBook, error) {
			return wModel.TalentBook{
				Title: "–û –ü–æ—ç–∑–∏–∏",
			}, nil
		}).MinTimes(1).MaxTimes(1)

	w.EXPECT().
		GetTalentBookWeekdays("ballad").
		DoAndReturn(func(bookType string) ([]string, error) {
			return []string{
				"wednesday",
				"saturday",
			}, nil
		}).MinTimes(1).MaxTimes(1)

	w.EXPECT().
		GetAscensionMaterialsByNames(gomock.Any()).
		DoAndReturn(func(names []string) ([]wModel.AscensionMaterial, error) {
			return []wModel.AscensionMaterial{
				{
					Title: "–°–µ—Å–∏–ª–∏—è",
					Type:  "local_speciality",
				},
				{
					Title: "–°–ª–∞–π–º—ã",
					Type:  "common",
				},
			}, nil
		}).MinTimes(1).MaxTimes(1)

	w.EXPECT().
		GetGemByName("vayuda_turquoise").
		DoAndReturn(func(name string) (wModel.Gem, error) {
			return wModel.Gem{
				Name:  "vayuda_turquoise",
				Title: "–ë–∏—Ä—é–∑–∞ –í–∞–π—é–¥–∞",
			}, nil
		}).MinTimes(1).MaxTimes(1)

	w.EXPECT().
		GetGemDropInfoByName("vayuda_turquoise").
		DoAndReturn(func(name string) ([]wModel.BossDrop, error) {
			return []wModel.BossDrop{
				{
					Boss: "–ê–Ω–µ–º–æ –≥–∏–ø–æ—Å—Ç–∞–∑–∏—Å",
					Type: "world",
				},
				{
					Boss: "–î–≤–∞–ª–∏–Ω",
					Type: "weekly",
				},
			}, nil
		}).MinTimes(1).MaxTimes(1)

	w.EXPECT().
		GetWorldBossDropByName("hurricane_seed").
		DoAndReturn(func(name string) (wModel.BossDrop, error) {
			return wModel.BossDrop{
				Title:    "–°–µ–º—è —É—Ä–∞–≥–∞–Ω–∞",
				Boss:     "–ê–Ω–µ–º–æ –≥–∏–ø–æ—Å—Ç–∞–∑–∏—Å",
				Location: "–ú–æ–Ω–¥—à—Ç–∞–¥—Ç",
				Type:     "world",
			}, nil
		}).MinTimes(1).MaxTimes(1)

	w.EXPECT().
		GetWeeklyBossDropByName("tail_of_boreas").
		DoAndReturn(func(name string) (wModel.BossDrop, error) {
			return wModel.BossDrop{
				Title:    "–•–≤–æ—Å—Ç –ë–æ—Ä–µ—è",
				Boss:     "–ê–Ω–¥—Ä–∏—É—Å",
				Location: "–ú–æ–Ω–¥—à—Ç–∞–¥—Ç",
				Domain:   "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –í–æ–ª–∫–∞ –°–µ–≤–µ—Ä–∞",
				Type:     "weekly",
			}, nil
		}).MinTimes(1).MaxTimes(1)

	cmdr := Commander{
		service: &service.Service{
			TodayWeekday: "saturday",
			Archive:      archive.NewMock(w, c),
		},
		renderer: renderer.NewRenderer(DefaultTemplatePath),
	}

	expected := `*–í–µ–Ω—Ç–∏* üçÉ *5*‚òÖ
–†–µ–≥–∏–æ–Ω: –ú–æ–Ω–¥—à—Ç–∞–¥—Ç

*–í–æ–∑–≤—ã—à–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (1-90):*
*üü¢ –ë–∏—Ä—é–∑–∞ –í–∞–π—é–¥–∞* ‚Äî 1/9/9/6 —à—Ç.
üí• *–°–µ–º—è —É—Ä–∞–≥–∞–Ω–∞* ‚Äî 2/4/8/12/20 ‚Äî 46 —à—Ç.
–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å: –ê–Ω–µ–º–æ –≥–∏–ø–æ—Å—Ç–∞–∑–∏—Å, –ú–æ–Ω–¥—à—Ç–∞–¥—Ç
üå∫ *–°–µ—Å–∏–ª–∏—è* ‚Äî 3/10/20/30/45/60 ‚Äî 168 —à—Ç.
ü¶¥ *–°–ª–∞–π–º—ã* ‚Äî 18/30/36 —à—Ç.
üß† *¬´–û–ø—ã—Ç –≥–µ—Ä–æ—è¬ª* ‚Äî 432 —à—Ç.
üí∞ *–ú–æ—Ä–∞* ‚Äî 420 000

*–í–æ–∑–≤—ã—à–µ–Ω–∏–µ —Ç–∞–ª–∞–Ω—Ç–æ–≤ (1-10):*
üìö *–ö–Ω–∏–≥–∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤:* ¬´–û –ü–æ—ç–∑–∏–∏¬ª ‚Äî 9/63/114 —à—Ç.
–ö–æ–≥–¥–∞: —Å—Ä–µ–¥–∞, üìç *—Å—É–±–±–æ—Ç–∞*, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
ü¶¥ *–°–ª–∞–π–º—ã* ‚Äî 18/30/36 —à—Ç.
‚öú *–•–≤–æ—Å—Ç –ë–æ—Ä–µ—è* ‚Äî 18 —à—Ç.
–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å: –ê–Ω–¥—Ä–∏—É—Å (–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –í–æ–ª–∫–∞ –°–µ–≤–µ—Ä–∞), –ú–æ–Ω–¥—à—Ç–∞–¥—Ç
üëë *–ö–æ—Ä–æ–Ω–∞ –ø—Ä–æ–∑—Ä–µ–Ω–∏—è* ‚Äî 3 —à—Ç.
üí∞ *–ú–æ—Ä–∞* ‚Äî 4 950 000`

	result, element, gem := cmdr.GetCharacterInfo("–í–µ–Ω—Ç–∏")
	assert.Equal(t, expected, result)
	assert.Equal(t, "–ê–Ω–µ–º–æ", element)
	assert.Equal(t, "\U0001F7E2 –ë–∏—Ä—é–∑–∞ –í–∞–π—é–¥–∞", gem)
}
